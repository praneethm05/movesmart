import React, { useState, useEffect } from 'react';
import { Plus, Car, Fuel } from 'lucide-react';
import { vehicleService } from '../services/api';
import './Vehicle.css';

const VehicleCard = ({ type, name, mileage }) => (
  <div className="vehicle-card">
    <Car size={24} className="vehicle-icon" />
    <div className="vehicle-info">
      <h3>{name}</h3>
      <p className="vehicle-type">{type}</p>
      <div className="mileage-info">
        <Fuel size={16} />
        <span>{mileage} km/L</span>
      </div>
    </div>
  </div>
);

const defaultVehicle = {
  type: 'Sedan',
  name: 'Default Vehicle',
  mileage: '15.0'
};

export const Vehicle = () => {
  const [vehicles, setVehicles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showAddForm, setShowAddForm] = useState(false);
  const [newVehicle, setNewVehicle] = useState({
    type: '',
    name: '',
    mileage: ''
  });

  useEffect(() => {
    fetchVehicles();
  }, []);

  const fetchVehicles = async () => {
    try {
      console.log('Fetching vehicles...');
      const response = await vehicleService.getAllVehicles();
      console.log('API Response:', response);
      const data = response.data;
      
      // Transform API data to match our component structure
      const transformedData = data.map(vehicle => ({
        id: vehicle._id,
        type: vehicle.vehicle_type,
        name: vehicle.license_plate,
        mileage: '15.0' // Since mileage isn't in API response, using default
      }));
      
      setVehicles(transformedData.length > 0 ? transformedData : [defaultVehicle]);
    } catch (error) {
      console.error('Error details:', {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data
      });
      setVehicles([defaultVehicle]);
    } finally {
      setLoading(false);
    }
  };

  const handleAddVehicle = async (e) => {
    e.preventDefault();
    try {
      // Simplified data structure to match backend expectations
      const vehicleData = {
        vehicle_type: newVehicle.type || 'Sedan',
        license_plate: newVehicle.name,
        user_id: "1"
        // Removed vehicle_id as it should be generated by backend
      };
      
      console.log('Sending vehicle data:', vehicleData);
      const response = await vehicleService.addVehicle(vehicleData);
      console.log('Add vehicle response:', response);

      if (response && response.data) {
        const addedVehicle = {
          id: response.data._id,
          type: response.data.vehicle_type,
          name: response.data.license_plate,
          mileage: '15.0'
        };
        
        setVehicles([...vehicles, addedVehicle]);
        setNewVehicle({ type: '', name: '', mileage: '' });
        setShowAddForm(false);
      }
    } catch (error) {
      console.error('Error details:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
        data: error.config?.data // Log what was sent
      });
      alert('Failed to add vehicle. Please check the form data.');
    }
  };

  if (loading) {
    return <div className="loading">Loading vehicles...</div>;
  }

  return (
    <div className="page-container">
      <div className="page-header">
        <h1>My Vehicles</h1>
        <button 
          className="add-vehicle-btn"
          onClick={() => setShowAddForm(true)}
        >
          <Plus size={20} />
          Add Vehicle
        </button>
      </div>

      <div className="vehicles-grid">
        {vehicles.map((vehicle, index) => (
          <VehicleCard key={vehicle.id || index} {...vehicle} />
        ))}
      </div>

      {showAddForm && (
        <div className="modal-overlay">
          <div className="add-vehicle-modal">
            <h2>Add New Vehicle</h2>
            <form onSubmit={handleAddVehicle}>
              <div className="form-group">
                <label>Vehicle Type</label>
                <input
                  type="text"
                  placeholder="e.g., Sedan, SUV"
                  value={newVehicle.type || 'Sedan'}
                  onChange={(e) => setNewVehicle({...newVehicle, type: e.target.value})}
                  required
                />
              </div>
              <div className="form-group">
                <label>Vehicle Name</label>
                <input
                  type="text"
                  placeholder="e.g., Honda City"
                  value={newVehicle.name}
                  onChange={(e) => setNewVehicle({...newVehicle, name: e.target.value})}
                  required
                />
              </div>
              <div className="form-group">
                <label>Mileage (km/L)</label>
                <input
                  type="number"
                  step="0.1"
                  placeholder="e.g., 18.5"
                  value={newVehicle.mileage}
                  onChange={(e) => setNewVehicle({...newVehicle, mileage: e.target.value})}
                  required
                />
              </div>
              <div className="modal-actions">
                <button type="button" onClick={() => setShowAddForm(false)}>Cancel</button>
                <button type="submit" className="submit-btn">Add Vehicle</button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}; 